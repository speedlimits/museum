void main_black(out float4 oColour:COLOR)
{
  oColour.x=0.0;
  oColour.y=0.0;
  oColour.z=0.0;
  oColour.w=1.0;
}
void main_vp
(
  float4 iPosition : POSITION, //in object space
  float3 iNormal : NORMAL, //in object space
  float2 iTexCoord0 : TEXCOORD0,
  out float4 oPosition : POSITION, //in projection space
  out float2 oTexCoord0 : TEXCOORD0, 
  out float3 oNormal : TEXCOORD1, //in object space
  out float3 oEyeDirObjectSpace : TEXCOORD2, //position in object space
  out float4 oTexCoord1sd : TEXCOORD3,
  out float3 oTangent: TEXCOORD4,
  out float3 oBinormal: TEXCOORD5,
  uniform float3 eyePosition,
  uniform float4 splatScales,
  uniform float4 detailScales,
  uniform float4x4 worldViewProj
)
{
  // pass normal
  oTexCoord0 = iTexCoord0;
  oTexCoord1sd.xy= iTexCoord0 * splatScales.x;
  oTexCoord1sd.zw= iTexCoord0 * detailScales.x;
  //pass the object space vertex position through to the fragment shader
  oEyeDirObjectSpace = eyePosition-iPosition.xyz;  
  oNormal = normalize(iNormal);
  oBinormal = normalize(cross(oEyeDirObjectSpace,iNormal));
  oTangent=normalize(cross(iNormal,oBinormal));
  oPosition = mul(worldViewProj, iPosition);
}


void main_decompress_vp
(
  float4 iPosition : POSITION, //in object space
  float3 iNormal : NORMAL, //in object space
  float2 iTexCoord0 : TEXCOORD0,
    float2               iLodpos             : BLENDWEIGHT,
  out float4 oPosition : POSITION, //in projection space
  out float2 oTexCoord0 : TEXCOORD0, 
  out float3 oNormal : TEXCOORD1, //in object space
  out float3 oEyeDirObjectSpace : TEXCOORD2, //position in object space
  out float4 oTexCoord1sd : TEXCOORD3,
  out float3 oTangent: TEXCOORD4,
  out float3 oBinormal: TEXCOORD5,
  uniform float3 eyePosition,
  uniform float passNumber,
  uniform float4 splatScales,
  uniform float4 detailScales,
  uniform float4x4 worldViewProj,
  uniform float4 lightPosition,

  uniform float4 compressionSettings
)
{
  // pass normal

  oTexCoord0 = iTexCoord0;
  oTexCoord1sd.xy= iTexCoord0 * splatScales.x;
  oTexCoord1sd.zw= iTexCoord0 * detailScales.x;

  // Calculate the output position and texture coordinates using textures coordinates input.
  float height = ((iPosition.x + 32768) + (iLodpos.x - iPosition.x) * compressionSettings[3]) * compressionSettings[1];
  oPosition = float4(iTexCoord0.x * compressionSettings[0], height, iTexCoord0.y * compressionSettings[2], 1.0f);
  
  oEyeDirObjectSpace = eyePosition.xyz-oPosition.xyz;  
  oNormal = normalize(iNormal);
  oBinormal = normalize(cross(oEyeDirObjectSpace,iNormal));

  // transform position to projection space
  oPosition = mul(worldViewProj, oPosition);
}






float3 mycross(float3 a, float3 b) {
  return cross(a,b);//float3(a.y*b.z-b.y*a.z,a.z*b.x-b.z*a.x,a.x*b.y-b.x*a.y);
}

float3 expand(float3 inp) {
  return inp*2.0f-1.0f;
}
void main_fp
(
  float2 iTexCoord0 : TEXCOORD0,
  float3 iNormal : TEXCOORD1, //in object space
  float3 eyeDirObjectSpace : TEXCOORD2,
  float4 iTexCoord1sd: TEXCOORD3,
  float3 iTangent : TEXCOORD4, 
  float3 iBinormal: TEXCOORD5,
  out float4 oColor : COLOR,
  uniform float4 eyePosition,
  uniform float4 matAmbient,
  //uniform float4 splatScales,
  //uniform float4 detailScales,
  uniform float4 detailAmbientCoefs,
  uniform float4 scaleBias,
  uniform float4 lightAmbient,
  uniform sampler2D coverageMap:register(s0),
  uniform sampler2D splat1Map:register(s1),
  uniform sampler2D splat2Map:register(s2),
  uniform sampler2D splat3Map:register(s3),
  uniform sampler2D splat4Map:register(s4),
  uniform sampler2D heightMap:register(s5),
  uniform sampler2D detail0Map:register(s6),
  uniform sampler2D detail1Map:register(s11),
  uniform sampler2D detail2Map:register(s12),
  uniform sampler2D detail3Map:register(s13),
  uniform sampler2D normal0Map: register (s7),
  uniform sampler2D normal1Map: register (s8),
  uniform sampler2D normal2Map: register (s9),
  uniform sampler2D normal3Map: register (s10)
//  uniform sampler2D detail1MapX:register(s14)
//  uniform sampler2D detail2Map:register(s15)

)
{
  //float4 unused=detailScales*splatScales*ambientLight*lightAttenuation;
   

  //light vector

  float3x3 rotation=float3x3(iTangent,iBinormal,iNormal);
  float3 eyeDir=normalize(mul(rotation,eyeDirObjectSpace));
  float4 coverage = tex2D(coverageMap, iTexCoord0);  
  float heights=dot(tex2D(heightMap,iTexCoord1sd.zw).xyzw,coverage);//average this
  float displacement= (heights*scaleBias.x)+scaleBias.y;
  float2 newTexCoord = ((eyeDir*displacement).xy+iTexCoord1sd.zw);
  float4 detail0 = coverage.x*tex2D(detail3Map,newTexCoord);
  float4 detail1 = coverage.y*tex2D(detail2Map,newTexCoord);
  float4 detail2 = coverage.z*tex2D(detail1Map,newTexCoord);
  float4 detail3 = coverage.w*tex2D(detail0Map,newTexCoord);
  float4 surfcolor = tex2D(splat1Map, iTexCoord1sd.xy) * detail0
      + tex2D(splat2Map, iTexCoord1sd.xy) * detail1
      + tex2D(splat3Map, iTexCoord1sd.xy) * detail2
      + tex2D(splat4Map, iTexCoord1sd.xy) * detail3;

  
  //add diffuse light from material and light
  oColor = dot(detailAmbientCoefs,coverage)*lightAmbient*surfcolor;
}
