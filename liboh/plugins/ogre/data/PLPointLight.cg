void main_decompress_vp
(
  float4 iPosition : POSITION, //in object space
  float3 iTangent : TANGENT, //in object space
  float3 iNormal : NORMAL, //in object space
  float2 iTexCoord0 : TEXCOORD0,
    float2               iLodpos             : BLENDWEIGHT,
  out float4 oPosition : POSITION, //in projection space
  out float2 oTexCoord0 : TEXCOORD0, 
  out float3 oNormal : TEXCOORD1, //in object space
  out float3 oEyeDirObjectSpace : TEXCOORD2, //position in object space
  out float4 oTexCoord1sd : TEXCOORD3,
  out float3 oTangent: TEXCOORD4,
  out float3 oBinormal: TEXCOORD5,
  out float4 oLightVectorPassNumberEqualZero : TEXCOORD6,
  uniform float3 eyePosition,
  uniform float passNumber,
  uniform float4 splatScales,
  uniform float4 detailScales,
  uniform float4x4 worldViewProj,
  uniform float4 lightPosition,

  uniform float4 compressionSettings
)
{
  // pass normal
  oTexCoord0 = iTexCoord0;
  oTexCoord1sd.xy= iTexCoord0 * splatScales.x;
  oTexCoord1sd.zw= iTexCoord0 * detailScales.x;
  oLightVectorPassNumberEqualZero.w=(passNumber==0?1.0:0.0);

  // Calculate the output position and texture coordinates using textures coordinates input.
  float height = ((iPosition.x + 32768) + (iLodpos.x - iPosition.x) * compressionSettings[3]) * compressionSettings[1];
  oPosition = float4(iTexCoord0.x * compressionSettings[0], height, iTexCoord0.y * compressionSettings[2], 1.0f);

  oEyeDirObjectSpace = eyePosition-oPosition.xyz;  
  oNormal = normalize(iNormal);
  oBinormal = normalize(cross(oEyeDirObjectSpace,iNormal));
  oTangent=normalize(cross(iNormal,oBinormal));

  // transform position to projection space
  oLightVectorPassNumberEqualZero.xyz=lightPosition.xyz-oPosition.xyz*lightPosition.w;

  oPosition = mul(worldViewProj, oPosition);
}


void main_vp
(
  float4 iPosition : POSITION, //in object space
  float3 iTangent : TANGENT, //in object space
  float3 iNormal : NORMAL, //in object space
  float2 iTexCoord0 : TEXCOORD0,
  out float4 oPosition : POSITION, //in projection space
  out float2 oTexCoord0 : TEXCOORD0, 
  out float3 oNormal : TEXCOORD1, //in object space
  out float3 oEyeDirObjectSpace : TEXCOORD2, //position in object space
  out float4 oTexCoord1sd : TEXCOORD3,
  out float3 oTangent: TEXCOORD4,
  out float3 oBinormal: TEXCOORD5,
  out float4 oLightVectorPassNumberEqualZero : TEXCOORD6,
  out float3 oPos:TEXCOORD7,
  uniform float3 eyePosition,
  uniform float passNumber,
  uniform float4 splatScales,
  uniform float4 detailScales,
  uniform float4x4 worldView,
  uniform float4x4 worldIT,
  uniform float4x4 worldViewProj,
  uniform float4 lightPosition
)
{
  // pass normal
  oEyeDirObjectSpace = eyePosition-iPosition.xyz;
  oNormal = normalize(mul((float3x3)worldIT,iNormal));
  oBinormal = normalize(cross(oEyeDirObjectSpace,iNormal));
  oTangent=normalize(cross(iNormal,oBinormal));
  oTexCoord0 = iTexCoord0;
  oTexCoord1sd.xy= iTexCoord0 * splatScales.x;
  oTexCoord1sd.zw= iTexCoord0 * detailScales.x;
  //pass the object space vertex position through to the fragment shader
  oLightVectorPassNumberEqualZero.xyz=lightPosition.xyz-iPosition.xyz*lightPosition.w;
  oLightVectorPassNumberEqualZero.w=(passNumber==0?1.0:0.0);
  // transform position to projection space
  oPosition=mul(worldView,iPosition);
  oPos=oPosition.xyz/oPosition.w;
  oPosition = mul(worldViewProj, iPosition);
}
float3 mycross(float3 a, float3 b) {
  return cross(a,b);//float3(a.y*b.z-b.y*a.z,a.z*b.x-b.z*a.x,a.x*b.y-b.x*a.y);
}

float3 expand(float2 inp) {
  return float3(inp.x,inp.y,.75)*2.0f-1.0f;
}
void main_fp
(
  float2 iTexCoord0 : TEXCOORD0,
  float3 iNormal : TEXCOORD1, //in object space
  float3 eyeDirObjectSpace : TEXCOORD2,
  float4 iTexCoord1sd: TEXCOORD3,
  float3 iTangent : TEXCOORD4, 
  float3 iBinormal: TEXCOORD5,
  float4 iLightVectorPassNumberEqualZero: TEXCOORD6,
  float3 iPos:TEXCOORD7,
  out float4 oColor : COLOR,
  uniform float4 lightDiffuse,
  uniform float4 lightSpecular,
  uniform float4 lightAmbient,
  uniform float4 lightAttenuation,
  uniform float4 matDiffuse,
  //uniform float4 splatcales,
  //uniform float4 detailScales,
  uniform float4 detailSpecCoefs,
  uniform float4 scaleBias,
  uniform float4 ambientLight,
  uniform float4 height_cutoff,
  uniform sampler2D coverageMap:register(s0),
  uniform sampler2D splat1Map:register(s1),
  uniform sampler2D splat2Map:register(s2),
  uniform sampler2D splat3Map:register(s3),
  uniform sampler2D splat4Map:register(s4),
  uniform sampler2D heightMap:register(s5),
  uniform sampler2D detail0Map:register(s6),
  uniform sampler2D detail1Map:register(s11),
  uniform sampler2D detail2Map:register(s12),
  uniform sampler2D detail3Map:register(s13),
  uniform sampler2D normal0Map: register (s7),
  uniform sampler2D normal1Map: register (s8),
  uniform sampler2D normal2Map: register (s9),
  uniform sampler2D normal3Map: register (s10)
//  uniform sampler2D detail1MapX:register(s14)
//  uniform sampler2D detail2Map:register(s15)

)
{
  //float4 unused=detailScales*splatScales*ambientLight*lightAttenuation;
   
  float3 iLightVector=iLightVectorPassNumberEqualZero.xyz;
  float dist = length(iLightVector);

  //light vector

  float3x3 rotation=float3x3(iTangent,iBinormal,iNormal);
  float3 lightDir=normalize(mul(rotation,iLightVector));
  float3 eyeDir=normalize(mul(rotation,eyeDirObjectSpace));
  float3 halfAngle=normalize(eyeDir+lightDir);
  float4 coverage = tex2D(coverageMap, iTexCoord0).zwyx;  
  coverage.x=1.0-smoothstep(height_cutoff.x,height_cutoff.y,iPos.y);
  coverage.y=smoothstep(height_cutoff.x,height_cutoff.y,iPos.y)+.001;
  coverage.z=smoothstep(height_cutoff.y,height_cutoff.z,iPos.y);
  coverage.w=smoothstep(.5*(height_cutoff.z+height_cutoff.y),height_cutoff.w,iPos.y);
  if (coverage.z>0.0) {
    float omz=1.0-coverage.z;
    if (coverage.x>omz) {
       coverage.x=omz;
    }
    if (coverage.y>omz) {
       coverage.y=omz;
    }
  }
  if (coverage.w>0.0) {
    float omw=1.0-coverage.w;
    if (coverage.z>omw)
        coverage.z=omw;
    if (coverage.y>omw)
        coverage.y=omw;
    if (coverage.x>omw)
        coverage.x=omw;
  }
  float zheight=smoothstep(0.1,0.5,1.0-iNormal.y);
  coverage.z+=zheight;
  coverage.x-=zheight*.5;
  coverage.y-=zheight*.5;
  coverage.w-=zheight*.5;
  coverage.xyw=clamp(coverage.xyw,0.0,1.0);
  coverage/=(coverage.x+coverage.y+coverage.z+coverage.w);
  float heights=dot(tex2D(heightMap,iTexCoord1sd.zw).xyzw,coverage);//average this
  float displacement= (heights*scaleBias.x)+scaleBias.y;
  float2 newTexCoord = ((eyeDir*displacement).xy+iTexCoord1sd.zw);
  float3 normal=normalize(expand(
			tex2D(normal0Map,newTexCoord).xw*coverage.x+
			tex2D(normal1Map,newTexCoord).xw*coverage.y+
			tex2D(normal2Map,newTexCoord).xw*coverage.z+
			tex2D(normal3Map,newTexCoord).xw*coverage.w));
  float nDotH = dot(normal,halfAngle);
  float nDotL = dot(normal, lightDir);
  float4 detail0 = coverage.x*tex2D(detail0Map,newTexCoord);
  float4 detail1 = coverage.y*tex2D(detail1Map,newTexCoord);
  float4 detail2 = coverage.z*tex2D(detail2Map,newTexCoord);
  float4 detail3 = coverage.w*tex2D(detail3Map,newTexCoord);
  float4 surfcolor = tex2D(splat1Map, iTexCoord1sd.xy) * detail0
      + tex2D(splat2Map, iTexCoord1sd.xy) * detail1
      + tex2D(splat3Map, iTexCoord1sd.xy) * detail2
      + tex2D(splat4Map, iTexCoord1sd.xy) * detail3;

  float att = 1./(lightAttenuation[1] + lightAttenuation[2] * dist + lightAttenuation[3] * dist * dist);//FIXME NO DROPOFF
  
  //add diffuse light from material and light
  float4 color = (att * (lightDiffuse) * matDiffuse * saturate(nDotL));
  color+=iLightVectorPassNumberEqualZero.w*(lightAmbient)+lightDiffuse.xyzz*lightDiffuse.w*att;//Only adds it when pass iteration =0;
  color*=surfcolor;
  if (nDotH>0) {
    float4 specular = dot(detailSpecCoefs,coverage)*pow(nDotH,35)*lightSpecular*att;
  
//  nDotH=0;
    color+=specular;
  }
  oColor=color;
  //oColor=iNormal.xyzy;//color*=1.5;
}
