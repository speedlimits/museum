#!/usr/bin/python
import sys, os, time

fullscreen=True
debug=False
width = 1360
height = 768
try:
    f=open("bornholm.ini")
    s=f.readline()
    while s:
        w = s.strip().split("=")
        if w[0]=="fullscreen":
            if w[1]!="true":
                fullscreen=False
        if w[0]=="debug":
            if w[1]=="true":
                debug=True
        if w[0]=="resolution":
            ww=w[1].split(",")
            width=int(ww[0])
            height=int(ww[1])
        s=f.readline()
except:
    pass

print "fullscreen:", fullscreen, "width:", width, "height:", height, "debug:", debug

if len(sys.argv)==2 and sys.argv[1] in ("curator", "critic", "funmode", "flythru"):
    cmd = "./run scenes/" + sys.argv[1] + ".csv scenes/" + sys.argv[1] + "_env.csv"
##    if sys.argv[1] in ("curator", "funmode", "critic"):
    cmd += " scenes/" + sys.argv[1] + "_art.csv"
    f = open("build/cmake/mode.txt", "w")
    f.write("mode=" + sys.argv[1] + "\n")
    f.write("fullscreen=" + str(fullscreen) + "\n")
    f.write("width=" + str(width) + "\n");
    f.write("height=" + str(height) + "\n");
    f.write("debug=" + str(debug) + "\n")
    f.close()
    os.system(cmd)
    exit()

def check_for_proc(proc):
    sin, sout = os.popen2("ps ax")
    s = sout.read()
##    print s
    procs = s.split("\n")
    running=0
    for p in procs:
        w = p.split()
        if proc in w:
            running=int(w[0])
##    print "check_for_proc", proc, "returns:", running
    return running

#
# run local HTTP server
#
if not check_for_proc("http_server.py"):
    cmd = 'cd cdn; xterm -e "python http_server.py -p 8000 ." &'
    os.system(cmd)

#
# Check for executable version
#

if os.path.exists("build/cmake/cppoh_d"):
    spaceserver = "space_d"
    proxserver = "proximity_d"
    executable = "cppoh_wrapper.sh"
else:
    if os.path.exists("build/cmake/cppoh"):
        spaceserver = "space"
        proxserver = "proximity"
        executable = "cppoh_wrapper.sh cppoh"
    else:
        print "can't find executable"
        exit()

#
# Run prox & space daemons (if not already running)
#

for proc, delay in (proxserver, 4.5), (spaceserver, .5):

    if not check_for_proc("./"+proc):
        cmd = 'xterm -e "cd build/cmake; ./' + proc + '" &'
        print cmd
        os.system(cmd)
        time.sleep(delay)

#
# Convert .csv files into sqlite .db files
#

if len(sys.argv) > 1:
    if len(sys.argv) == 2:
        fin = sys.argv[1]
    else:
        fin = ""
        for i in sys.argv[1:]:
            fin += i + " "
else:
    fin = "scene.csv"

fout = "scene.db"
cmd = "python csv_converter.py " + fin +" "+ fout
print cmd
sin, sout = os.popen2(cmd)
s = sout.read()
if not "SUCCESS" in s:
    print s
    print "csv --> db conversion failed, aborting run"
    exit()

#
# Run our object host
#

cmd = "cd build/cmake; ./" + executable + " --db ../../" + fout + ' > "' + time.ctime() + '.log" 2>&1'

print cmd
os.system(cmd)
