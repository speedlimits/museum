/*  Sirikata Serialization Protocol
 *  MessageHeader.pbj
 *
 *  Copyright (c) 2009, Daniel Reiter Horn
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of Sirikata nor the names of its contributors may
 *    be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package Sirikata.Protocol;

//This is the standard message container. All items sent over the wire should be preceeded type MessageHeader. Reserved areas may be used in future headers
message Header {
    reserve 1 to 8;
    reserve 1536 to 2560;
    reserve 229376 to 294912;
//******************BEGIN ROUTING HEADER*********************
    //the source ObjectReference (space is implicit)
    optional uuid source_object = 1;

    //the source port from which the message originated
    optional uint32 source_port = 3;

    //the spaceID origin message (in case we have a space routing messages)
    optional uuid source_space = 1536;

    //the destination ObjectReference (space is implicit) if omitted, space is destination
    optional uuid destination_object = 2;

    //the destination port that should process the message
    optional uint32 destination_port = 4;

    //optional spaceID of the destination object (in case we have a space routing messages, or it is not otherwise implicit)

    optional uuid destination_space = 1537;
//******************END ROUTING HEADER*********************


//******************BEGIN RPC HEADER*********************
    /** The message id, used for pairing message responses.
     *
     * - If ommitted, a response is not expected.
     * - If included and the message reaches the endpoint, a response SHOULD
     *   be sent even if it is just an empty acknowledgement, but implementations may
     *   decide not to respond if an id is not used.
     */
    optional int64 id = 7;

    /** The id of the message we are replying to. Required if the
     * message is a response to a previous message.
     * Usually only either 'id' or 'reply_id' are present. If both are present,
     * treat this as a response message and ignore the 'id' field.
     */
    optional int64 reply_id = 8;

    /* In these examples, An object Object Host AA sends to Object BB via space SS.
     * The original message from AA has an 'id' field. AA then gets a response with
     * a 'reply_id' and an 'return_status', indicating an error.
     */
    enum ReturnStatus {
        SUCCESS = 0;
        NETWORK_FAILURE = 1; ///< The network connection was interrupted. Usually sent by AA.
        TIMEOUT_FAILURE = 3; ///< Failed to receive any reply messages. Usually sent by AA.
        PROTOCOL_ERROR = 4; ///< The message format could not be understood. Usually sent by BB.
        PORT_FAILURE = 5; ///< Object BB does not understand or handle 'destination_port' messages.
        UNKNOWN_OBJECT = 6; ///< BB does not exist, or is not visible to AA. Sent by SS.
    }
    /** If not successful, the MessageBody should contain the reason for failure.
     * return_status applies to the whole message body, and is used for network
     * or protocol errors.
     */
    optional ReturnStatus return_status=1792;
//******************END RPC HEADER*********************
}
